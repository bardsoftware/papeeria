# Author: Sergey Sokolov
import time

import grpc
from concurrent import futures

from spellchecker import Spellchecker
import spellchecker_pb2


_ONE_DAY_IN_SECONDS = 60 * 60 * 24


class SpellcheckerServicer(spellchecker_pb2.SpellcheckServicer):
    """
    gRPC service to check text that comes from clients.
    """
    def __init__(self):
        self.checker = Spellchecker("/usr/share/hunspell", "en_US")

    def CheckText(self, request, context):
        """
        Method gets request from client that contains text to check and
        languages list and returns Suggestions message (JSON-like).

        :param request: Object generated by gRPC, contains text and languages inside.
        :param context: gRPC service object, never mind this one.
        :return: Suggestions message.
        """
        text = str(request.text, encoding="UTF-8")
        languages = [lang for lang in request.language]

        return self.checker.check_text(text, languages)


def serve(port: str, max_workers: int = 2):
    """
    Initialize and run the gRPC server.

    :param port: Port on which the server would be listening.
    :param max_workers: Size of thread pool to serve clients.
    """
    server = grpc.server(
        futures.ThreadPoolExecutor(max_workers=max_workers)
    )

    spellchecker_pb2.add_SpellcheckServicer_to_server(
        SpellcheckerServicer(),
        server
    )

    server.add_insecure_port('[::]:{}'.format(port))
    server.start()

    try:
        while True:
            time.sleep(_ONE_DAY_IN_SECONDS)
    except KeyboardInterrupt:
        server.stop(0)

if __name__ == '__main__':
    serve(50051)
