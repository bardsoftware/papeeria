# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: spellchecker.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='spellchecker.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x12spellchecker.proto\"&\n\x04Text\x12\x0c\n\x04text\x18\x01 \x01(\x0c\x12\x10\n\x08language\x18\x02 \x03(\t\"\x1b\n\x0bSuggestions\x12\x0c\n\x04json\x18\x01 \x01(\t20\n\nSpellcheck\x12\"\n\tCheckText\x12\x05.Text\x1a\x0c.Suggestions\"\x00\x42\x15\n\x13\x63om.papeeria.clientb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TEXT = _descriptor.Descriptor(
  name='Text',
  full_name='Text',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='Text.text', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='language', full_name='Text.language', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=60,
)


_SUGGESTIONS = _descriptor.Descriptor(
  name='Suggestions',
  full_name='Suggestions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='json', full_name='Suggestions.json', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=62,
  serialized_end=89,
)

DESCRIPTOR.message_types_by_name['Text'] = _TEXT
DESCRIPTOR.message_types_by_name['Suggestions'] = _SUGGESTIONS

Text = _reflection.GeneratedProtocolMessageType('Text', (_message.Message,), dict(
  DESCRIPTOR = _TEXT,
  __module__ = 'spellchecker_pb2'
  # @@protoc_insertion_point(class_scope:Text)
  ))
_sym_db.RegisterMessage(Text)

Suggestions = _reflection.GeneratedProtocolMessageType('Suggestions', (_message.Message,), dict(
  DESCRIPTOR = _SUGGESTIONS,
  __module__ = 'spellchecker_pb2'
  # @@protoc_insertion_point(class_scope:Suggestions)
  ))
_sym_db.RegisterMessage(Suggestions)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\023com.papeeria.client'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class SpellcheckStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CheckText = channel.unary_unary(
        '/Spellcheck/CheckText',
        request_serializer=Text.SerializeToString,
        response_deserializer=Suggestions.FromString,
        )


class SpellcheckServicer(object):

  def CheckText(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SpellcheckServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CheckText': grpc.unary_unary_rpc_method_handler(
          servicer.CheckText,
          request_deserializer=Text.FromString,
          response_serializer=Suggestions.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Spellcheck', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaSpellcheckServicer(object):
  def CheckText(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaSpellcheckStub(object):
  def CheckText(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  CheckText.future = None


def beta_create_Spellcheck_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Spellcheck', 'CheckText'): Text.FromString,
  }
  response_serializers = {
    ('Spellcheck', 'CheckText'): Suggestions.SerializeToString,
  }
  method_implementations = {
    ('Spellcheck', 'CheckText'): face_utilities.unary_unary_inline(servicer.CheckText),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Spellcheck_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Spellcheck', 'CheckText'): Text.SerializeToString,
  }
  response_deserializers = {
    ('Spellcheck', 'CheckText'): Suggestions.FromString,
  }
  cardinalities = {
    'CheckText': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Spellcheck', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
